# Generated by Django 4.2.3 on 2024-01-18 18:57

from decimal import Decimal
import django.contrib.postgres.fields
import django.core.serializers.json
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("ajna", "0085_v3overallstats"),
    ]

    operations = [
        migrations.CreateModel(
            name="V4ArbitrumAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42, null=True)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "collateral_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "debt_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("settled", models.BooleanField(default=False)),
                ("settle_time", models.DateTimeField(null=True)),
                (
                    "bond_factor",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "bond_size",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "neutral_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionAuctionNFTSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("index", models.TextField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionBucketTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("index", models.BigIntegerField()),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("bond", models.DecimalField(decimal_places=18, max_digits=32)),
                ("locked", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "kick_momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "reference_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("settled_debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("created_at_block_number", models.BigIntegerField()),
                ("created_at_timestamp", models.BigIntegerField()),
                ("last_block_number", models.BigIntegerField(null=True)),
                ("collateral_token_symbol", models.CharField(max_length=64, null=True)),
                ("quote_token_symbol", models.CharField(max_length=64, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumReserveAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumReserveAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("burn_epoch", models.BigIntegerField()),
                ("kicker", models.CharField(max_length=42)),
                (
                    "kicker_award",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumReserveAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "quote_purchased",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "underlying_address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("symbol", models.CharField(db_index=True, max_length=64)),
                ("name", models.CharField(max_length=255)),
                ("decimals", models.BigIntegerField()),
                (
                    "underlying_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("is_estimated_price", models.BooleanField(default=False)),
                ("pool_count", models.BigIntegerField(null=True)),
                ("total_supply", models.BigIntegerField(null=True)),
                ("tx_count", models.BigIntegerField(null=True)),
                ("is_erc721", models.BooleanField(null=True)),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=42, unique=True)),
                ("first_activity", models.DateTimeField(null=True)),
                ("last_activity", models.DateTimeField(null=True)),
                ("eoa", models.CharField(max_length=42, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42, null=True)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "collateral_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "debt_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("settled", models.BooleanField(default=False)),
                ("settle_time", models.DateTimeField(null=True)),
                (
                    "bond_factor",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "bond_size",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "neutral_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionAuctionNFTSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("index", models.TextField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionBucketTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("index", models.BigIntegerField()),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("bond", models.DecimalField(decimal_places=18, max_digits=32)),
                ("locked", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "kick_momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "reference_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("settled_debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BasePool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("created_at_block_number", models.BigIntegerField()),
                ("created_at_timestamp", models.BigIntegerField()),
                ("last_block_number", models.BigIntegerField(null=True)),
                ("collateral_token_symbol", models.CharField(max_length=64, null=True)),
                ("quote_token_symbol", models.CharField(max_length=64, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseReserveAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseReserveAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("burn_epoch", models.BigIntegerField()),
                ("kicker", models.CharField(max_length=42)),
                (
                    "kicker_award",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseReserveAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "quote_purchased",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "underlying_address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("symbol", models.CharField(db_index=True, max_length=64)),
                ("name", models.CharField(max_length=255)),
                ("decimals", models.BigIntegerField()),
                (
                    "underlying_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("is_estimated_price", models.BooleanField(default=False)),
                ("pool_count", models.BigIntegerField(null=True)),
                ("total_supply", models.BigIntegerField(null=True)),
                ("tx_count", models.BigIntegerField(null=True)),
                ("is_erc721", models.BooleanField(null=True)),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4BaseWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=42, unique=True)),
                ("first_activity", models.DateTimeField(null=True)),
                ("last_activity", models.DateTimeField(null=True)),
                ("eoa", models.CharField(max_length=42, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42, null=True)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "collateral_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "debt_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("settled", models.BooleanField(default=False)),
                ("settle_time", models.DateTimeField(null=True)),
                (
                    "bond_factor",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "bond_size",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "neutral_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionAuctionNFTSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("index", models.TextField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionBucketTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("index", models.BigIntegerField()),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("bond", models.DecimalField(decimal_places=18, max_digits=32)),
                ("locked", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "kick_momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "reference_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("settled_debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("created_at_block_number", models.BigIntegerField()),
                ("created_at_timestamp", models.BigIntegerField()),
                ("last_block_number", models.BigIntegerField(null=True)),
                ("collateral_token_symbol", models.CharField(max_length=64, null=True)),
                ("quote_token_symbol", models.CharField(max_length=64, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismReserveAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismReserveAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("burn_epoch", models.BigIntegerField()),
                ("kicker", models.CharField(max_length=42)),
                (
                    "kicker_award",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismReserveAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "quote_purchased",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "underlying_address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("symbol", models.CharField(db_index=True, max_length=64)),
                ("name", models.CharField(max_length=255)),
                ("decimals", models.BigIntegerField()),
                (
                    "underlying_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("is_estimated_price", models.BooleanField(default=False)),
                ("pool_count", models.BigIntegerField(null=True)),
                ("total_supply", models.BigIntegerField(null=True)),
                ("tx_count", models.BigIntegerField(null=True)),
                ("is_erc721", models.BooleanField(null=True)),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OptimismWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=42, unique=True)),
                ("first_activity", models.DateTimeField(null=True)),
                ("last_activity", models.DateTimeField(null=True)),
                ("eoa", models.CharField(max_length=42, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4OverallStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_ajna_burned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("date", models.DateField(unique=True)),
            ],
            options={
                "ordering": ("-date",),
                "get_latest_by": "date",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42, null=True)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "collateral_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "debt_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("settled", models.BooleanField(default=False)),
                ("settle_time", models.DateTimeField(null=True)),
                (
                    "bond_factor",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "bond_size",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "neutral_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionAuctionNFTSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("index", models.TextField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionBucketTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("index", models.BigIntegerField()),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("kicker", models.CharField(max_length=42)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("bond", models.DecimalField(decimal_places=18, max_digits=32)),
                ("locked", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "kick_momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "reference_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionSettle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("settled_debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("borrower", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("bond_change", models.DecimalField(decimal_places=18, max_digits=32)),
                ("is_reward", models.BooleanField(default=False)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66, null=True)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("created_at_block_number", models.BigIntegerField()),
                ("created_at_timestamp", models.BigIntegerField()),
                ("last_block_number", models.BigIntegerField(null=True)),
                ("collateral_token_symbol", models.CharField(max_length=64, null=True)),
                ("quote_token_symbol", models.CharField(max_length=64, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonReserveAuction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uid", models.TextField(unique=True)),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "last_take_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonReserveAuctionKick",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("burn_epoch", models.BigIntegerField()),
                ("kicker", models.CharField(max_length=42)),
                (
                    "kicker_award",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "starting_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonReserveAuctionTake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_index", models.CharField(max_length=26, unique=True)),
                ("reserve_auction_uid", models.TextField()),
                ("pool_address", models.CharField(max_length=42)),
                ("taker", models.CharField(max_length=42)),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "auction_price",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("ajna_burned", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "quote_purchased",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("transaction_hash", models.CharField(max_length=66)),
            ],
            options={
                "ordering": ("-block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "underlying_address",
                    models.CharField(db_index=True, max_length=42, unique=True),
                ),
                ("symbol", models.CharField(db_index=True, max_length=64)),
                ("name", models.CharField(max_length=255)),
                ("decimals", models.BigIntegerField()),
                (
                    "underlying_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("is_estimated_price", models.BooleanField(default=False)),
                ("pool_count", models.BigIntegerField(null=True)),
                ("total_supply", models.BigIntegerField(null=True)),
                ("tx_count", models.BigIntegerField(null=True)),
                ("is_erc721", models.BooleanField(null=True)),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=42, unique=True)),
                ("first_activity", models.DateTimeField(null=True)),
                ("last_activity", models.DateTimeField(null=True)),
                ("eoa", models.CharField(max_length=42, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="V4PolygonWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "lup",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonWalletPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(max_length=42)),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=[
                            "pool_address",
                            "wallet_address",
                            "bucket_index",
                            "block_number",
                        ],
                        name="ajna_v4poly_pool_ad_11aa71_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_address", "bucket_index"],
                        name="ajna_v4poly_pool_ad_331bd0_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4poly_pool_ad_6b885a_idx"
                    ),
                    models.Index(
                        fields=["wallet_address"], name="ajna_v4poly_wallet__c5d9e7_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4poly_bucket__946edd_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4poly_block_n_2cd0e4_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4poly_block_d_813dfd_idx"
                    ),
                ],
                "unique_together": {
                    ("pool_address", "wallet_address", "bucket_index", "block_number")
                },
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPriceFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=18, max_digits=32)),
                ("timestamp", models.BigIntegerField(db_index=True)),
                ("datetime", models.DateTimeField(null=True)),
                ("underlying_address", models.CharField(db_index=True, max_length=42)),
                ("estimated", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["underlying_address"],
                        name="ajna_v4poly_underly_d61c4a_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="ajna_v4poly_timesta_133e76_idx"
                    ),
                    models.Index(
                        fields=["datetime"], name="ajna_v4poly_datetim_b57330_idx"
                    ),
                    models.Index(
                        fields=["underlying_address", "datetime"],
                        name="ajna_v4poly_underly_a1b17a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPoolVolumeSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("date", models.DateField()),
            ],
            options={
                "abstract": False,
                "unique_together": {("pool_address", "date")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPoolSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("address", models.CharField(db_index=True, max_length=42)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateralization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("address", "datetime")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPoolEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "wallet_addresses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=42), null=True, size=None
                    ),
                ),
                (
                    "bucket_indexes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), null=True, size=None
                    ),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("order_index", models.CharField(max_length=26)),
                ("transaction_hash", models.CharField(max_length=66)),
                ("name", models.CharField(max_length=42)),
                ("data", models.JSONField()),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "order_index"],
                        name="ajna_v4poly_pool_ad_c81a3f_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses", "order_index"],
                        name="ajna_v4poly_pool_ad_01f0f6_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses"],
                        name="ajna_v4poly_pool_ad_207688_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4poly_pool_ad_101459_idx"
                    ),
                    models.Index(
                        fields=["order_index"], name="ajna_v4poly_order_i_81bcd8_idx"
                    ),
                ],
                "unique_together": {("pool_address", "order_index")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "lpb",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "bucket_index", "block_number"],
                        name="ajna_v4poly_pool_ad_0801ad_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "bucket_index"],
                        name="ajna_v4poly_pool_ad_127b4d_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4poly_pool_ad_217f7c_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4poly_bucket__490f90_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4poly_block_n_01ed3e_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4poly_block_d_854f57_idx"
                    ),
                ],
                "unique_together": {("pool_address", "bucket_index", "block_number")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.TextField()),
                ("key", models.TextField()),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    "activity",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("pool_address", models.CharField(max_length=42, null=True)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "unique_together": {("pool_address", "key", "type")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonCurrentWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4PolygonBucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bucket_index", models.BigIntegerField()),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lpb", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
                "unique_together": {("bucket_index", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "lup",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismWalletPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(max_length=42)),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=[
                            "pool_address",
                            "wallet_address",
                            "bucket_index",
                            "block_number",
                        ],
                        name="ajna_v4opti_pool_ad_d46157_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_address", "bucket_index"],
                        name="ajna_v4opti_pool_ad_316489_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4opti_pool_ad_512c83_idx"
                    ),
                    models.Index(
                        fields=["wallet_address"], name="ajna_v4opti_wallet__2e3786_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4opti_bucket__88fc86_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4opti_block_n_3009c5_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4opti_block_d_59ccb2_idx"
                    ),
                ],
                "unique_together": {
                    ("pool_address", "wallet_address", "bucket_index", "block_number")
                },
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPriceFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=18, max_digits=32)),
                ("timestamp", models.BigIntegerField(db_index=True)),
                ("datetime", models.DateTimeField(null=True)),
                ("underlying_address", models.CharField(db_index=True, max_length=42)),
                ("estimated", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["underlying_address"],
                        name="ajna_v4opti_underly_cc628d_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="ajna_v4opti_timesta_c8b9de_idx"
                    ),
                    models.Index(
                        fields=["datetime"], name="ajna_v4opti_datetim_525096_idx"
                    ),
                    models.Index(
                        fields=["underlying_address", "datetime"],
                        name="ajna_v4opti_underly_8898d1_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPoolVolumeSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("date", models.DateField()),
            ],
            options={
                "abstract": False,
                "unique_together": {("pool_address", "date")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPoolSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("address", models.CharField(db_index=True, max_length=42)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateralization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("address", "datetime")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPoolEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "wallet_addresses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=42), null=True, size=None
                    ),
                ),
                (
                    "bucket_indexes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), null=True, size=None
                    ),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("order_index", models.CharField(max_length=26)),
                ("transaction_hash", models.CharField(max_length=66)),
                ("name", models.CharField(max_length=42)),
                ("data", models.JSONField()),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "order_index"],
                        name="ajna_v4opti_pool_ad_85c728_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses", "order_index"],
                        name="ajna_v4opti_pool_ad_9b79ba_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses"],
                        name="ajna_v4opti_pool_ad_948aad_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4opti_pool_ad_7e043b_idx"
                    ),
                    models.Index(
                        fields=["order_index"], name="ajna_v4opti_order_i_7e8e02_idx"
                    ),
                ],
                "unique_together": {("pool_address", "order_index")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "lpb",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "bucket_index", "block_number"],
                        name="ajna_v4opti_pool_ad_af12df_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "bucket_index"],
                        name="ajna_v4opti_pool_ad_b2ece0_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4opti_pool_ad_988eed_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4opti_bucket__5b7e88_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4opti_block_n_c19264_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4opti_block_d_9103e7_idx"
                    ),
                ],
                "unique_together": {("pool_address", "bucket_index", "block_number")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.TextField()),
                ("key", models.TextField()),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    "activity",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("pool_address", models.CharField(max_length=42, null=True)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "unique_together": {("pool_address", "key", "type")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismCurrentWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4OptimismBucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bucket_index", models.BigIntegerField()),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lpb", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
                "unique_together": {("bucket_index", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4NetworkStatsDaily",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("network", models.CharField(db_index=True, max_length=42)),
                ("tvl", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "collateral_usd",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("supply_usd", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt_usd", models.DecimalField(decimal_places=18, max_digits=32)),
                ("date", models.DateField()),
            ],
            options={
                "abstract": False,
                "unique_together": {("network", "date")},
            },
        ),
        migrations.CreateModel(
            name="V4BaseWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "lup",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4BaseWalletPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(max_length=42)),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=[
                            "pool_address",
                            "wallet_address",
                            "bucket_index",
                            "block_number",
                        ],
                        name="ajna_v4base_pool_ad_01f17c_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_address", "bucket_index"],
                        name="ajna_v4base_pool_ad_5d6e27_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4base_pool_ad_c8f181_idx"
                    ),
                    models.Index(
                        fields=["wallet_address"], name="ajna_v4base_wallet__3e146e_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4base_bucket__99d1ee_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4base_block_n_8fb6f6_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4base_block_d_96ba6f_idx"
                    ),
                ],
                "unique_together": {
                    ("pool_address", "wallet_address", "bucket_index", "block_number")
                },
            },
        ),
        migrations.CreateModel(
            name="V4BasePriceFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=18, max_digits=32)),
                ("timestamp", models.BigIntegerField(db_index=True)),
                ("datetime", models.DateTimeField(null=True)),
                ("underlying_address", models.CharField(db_index=True, max_length=42)),
                ("estimated", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["underlying_address"],
                        name="ajna_v4base_underly_640412_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="ajna_v4base_timesta_0f9a1c_idx"
                    ),
                    models.Index(
                        fields=["datetime"], name="ajna_v4base_datetim_8933ed_idx"
                    ),
                    models.Index(
                        fields=["underlying_address", "datetime"],
                        name="ajna_v4base_underly_e89d93_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="V4BasePoolVolumeSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("date", models.DateField()),
            ],
            options={
                "abstract": False,
                "unique_together": {("pool_address", "date")},
            },
        ),
        migrations.CreateModel(
            name="V4BasePoolSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("address", models.CharField(db_index=True, max_length=42)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateralization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("address", "datetime")},
            },
        ),
        migrations.CreateModel(
            name="V4BasePoolEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "wallet_addresses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=42), null=True, size=None
                    ),
                ),
                (
                    "bucket_indexes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), null=True, size=None
                    ),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("order_index", models.CharField(max_length=26)),
                ("transaction_hash", models.CharField(max_length=66)),
                ("name", models.CharField(max_length=42)),
                ("data", models.JSONField()),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "order_index"],
                        name="ajna_v4base_pool_ad_e0aa90_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses", "order_index"],
                        name="ajna_v4base_pool_ad_8145eb_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses"],
                        name="ajna_v4base_pool_ad_2feecf_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4base_pool_ad_ab0c65_idx"
                    ),
                    models.Index(
                        fields=["order_index"], name="ajna_v4base_order_i_4e53e6_idx"
                    ),
                ],
                "unique_together": {("pool_address", "order_index")},
            },
        ),
        migrations.CreateModel(
            name="V4BasePoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "lpb",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "bucket_index", "block_number"],
                        name="ajna_v4base_pool_ad_8ca84c_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "bucket_index"],
                        name="ajna_v4base_pool_ad_ef0c9d_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4base_pool_ad_a49ba8_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4base_bucket__d0bd1c_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4base_block_n_4cffed_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4base_block_d_a8fc9c_idx"
                    ),
                ],
                "unique_together": {("pool_address", "bucket_index", "block_number")},
            },
        ),
        migrations.CreateModel(
            name="V4BaseNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.TextField()),
                ("key", models.TextField()),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    "activity",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("pool_address", models.CharField(max_length=42, null=True)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "unique_together": {("pool_address", "key", "type")},
            },
        ),
        migrations.CreateModel(
            name="V4BaseCurrentWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4BaseBucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bucket_index", models.BigIntegerField()),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lpb", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
                "unique_together": {("bucket_index", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "lup",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumWalletPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(max_length=42)),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=[
                            "pool_address",
                            "wallet_address",
                            "bucket_index",
                            "block_number",
                        ],
                        name="ajna_v4arbi_pool_ad_75e8db_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_address", "bucket_index"],
                        name="ajna_v4arbi_pool_ad_9992bc_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4arbi_pool_ad_f084e8_idx"
                    ),
                    models.Index(
                        fields=["wallet_address"], name="ajna_v4arbi_wallet__4f45d7_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4arbi_bucket__094994_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4arbi_block_n_724afc_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4arbi_block_d_901fda_idx"
                    ),
                ],
                "unique_together": {
                    ("pool_address", "wallet_address", "bucket_index", "block_number")
                },
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPriceFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=18, max_digits=32)),
                ("timestamp", models.BigIntegerField(db_index=True)),
                ("datetime", models.DateTimeField(null=True)),
                ("underlying_address", models.CharField(db_index=True, max_length=42)),
                ("estimated", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["underlying_address"],
                        name="ajna_v4arbi_underly_42b478_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="ajna_v4arbi_timesta_cba6c6_idx"
                    ),
                    models.Index(
                        fields=["datetime"], name="ajna_v4arbi_datetim_16bce6_idx"
                    ),
                    models.Index(
                        fields=["underlying_address", "datetime"],
                        name="ajna_v4arbi_underly_ff09ad_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPoolVolumeSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("amount", models.DecimalField(decimal_places=18, max_digits=32)),
                ("date", models.DateField()),
            ],
            options={
                "abstract": False,
                "unique_together": {("pool_address", "date")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPoolSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "erc",
                    models.CharField(
                        choices=[("erc20", "erc20"), ("erc721", "erc721")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("pool_size", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0debt",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("inflator", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "pending_inflator",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                ("borrow_rate", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "lend_rate",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "borrow_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "deposit_fee_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "pledged_collateral",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_interest_earned",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("tx_count", models.BigIntegerField(null=True)),
                ("loans_count", models.BigIntegerField()),
                ("max_borrower", models.CharField(max_length=42, null=True)),
                ("hpb", models.DecimalField(decimal_places=18, max_digits=32)),
                ("hpb_index", models.IntegerField()),
                ("htp", models.DecimalField(decimal_places=18, max_digits=32)),
                ("htp_index", models.IntegerField()),
                ("lup", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lup_index", models.IntegerField()),
                (
                    "momp",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("reserves", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "claimable_reserves",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "claimable_reserves_remaining",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("burn_epoch", models.BigIntegerField()),
                (
                    "total_ajna_burned",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=32
                    ),
                ),
                (
                    "min_debt_amount",
                    models.DecimalField(decimal_places=18, max_digits=40),
                ),
                (
                    "utilization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "current_meaningful_utilization",
                    models.DecimalField(decimal_places=18, max_digits=40, null=True),
                ),
                (
                    "actual_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "target_utilization",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                (
                    "total_bond_escrowed",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_balance",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateral_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "quote_token_address",
                    models.CharField(db_index=True, max_length=42, null=True),
                ),
                (
                    "volume_today",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "allowed_token_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("address", models.CharField(db_index=True, max_length=42)),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "collateralization",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("address", "datetime")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPoolEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                (
                    "wallet_addresses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=42), null=True, size=None
                    ),
                ),
                (
                    "bucket_indexes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), null=True, size=None
                    ),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
                ("order_index", models.CharField(max_length=26)),
                ("transaction_hash", models.CharField(max_length=66)),
                ("name", models.CharField(max_length=42)),
                ("data", models.JSONField()),
                (
                    "collateral_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "quote_token_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "order_index"],
                        name="ajna_v4arbi_pool_ad_cd36ea_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses", "order_index"],
                        name="ajna_v4arbi_pool_ad_6e199b_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "wallet_addresses"],
                        name="ajna_v4arbi_pool_ad_ef85a7_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4arbi_pool_ad_ca99e5_idx"
                    ),
                    models.Index(
                        fields=["order_index"], name="ajna_v4arbi_order_i_f0916b_idx"
                    ),
                ],
                "unique_together": {("pool_address", "order_index")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumPoolBucketState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pool_address", models.CharField(max_length=42)),
                ("bucket_index", models.IntegerField()),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "lpb",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("block_number", models.BigIntegerField()),
                ("block_datetime", models.DateTimeField()),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["pool_address", "bucket_index", "block_number"],
                        name="ajna_v4arbi_pool_ad_c2043a_idx",
                    ),
                    models.Index(
                        fields=["pool_address", "bucket_index"],
                        name="ajna_v4arbi_pool_ad_8cd746_idx",
                    ),
                    models.Index(
                        fields=["pool_address"], name="ajna_v4arbi_pool_ad_86b2d7_idx"
                    ),
                    models.Index(
                        fields=["bucket_index"], name="ajna_v4arbi_bucket__7376ab_idx"
                    ),
                    models.Index(
                        fields=["block_number"], name="ajna_v4arbi_block_n_11bbf5_idx"
                    ),
                    models.Index(
                        fields=["block_datetime"], name="ajna_v4arbi_block_d_358cbd_idx"
                    ),
                ],
                "unique_together": {("pool_address", "bucket_index", "block_number")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.TextField()),
                ("key", models.TextField()),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    "activity",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("datetime", models.DateTimeField(db_index=True)),
                ("pool_address", models.CharField(max_length=42, null=True)),
            ],
            options={
                "ordering": ("-datetime",),
                "get_latest_by": "datetime",
                "abstract": False,
                "unique_together": {("pool_address", "key", "type")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumCurrentWalletPoolPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wallet_address", models.CharField(db_index=True, max_length=42)),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("supply", models.DecimalField(decimal_places=18, max_digits=32)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("t0debt", models.DecimalField(decimal_places=18, max_digits=32)),
                ("debt", models.DecimalField(decimal_places=18, max_digits=40)),
                (
                    "t0np",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "np_tp_ratio",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                ("in_liquidation", models.BooleanField(default=False)),
                ("datetime", models.DateTimeField()),
                ("block_number", models.BigIntegerField(db_index=True)),
            ],
            options={
                "ordering": ("block_number",),
                "get_latest_by": "block_number",
                "abstract": False,
                "unique_together": {("wallet_address", "block_number", "pool_address")},
            },
        ),
        migrations.CreateModel(
            name="V4ArbitrumBucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bucket_index", models.BigIntegerField()),
                (
                    "bucket_price",
                    models.DecimalField(decimal_places=18, max_digits=32, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=18, max_digits=32),
                ),
                ("pool_address", models.CharField(db_index=True, max_length=42)),
                ("collateral", models.DecimalField(decimal_places=18, max_digits=32)),
                ("deposit", models.DecimalField(decimal_places=18, max_digits=32)),
                ("lpb", models.DecimalField(decimal_places=18, max_digits=32)),
            ],
            options={
                "abstract": False,
                "unique_together": {("bucket_index", "pool_address")},
            },
        ),
    ]
